############ NOT IMPLEMENTED!
# get all users
GET         /users                          controllers.AppUserController.showAllUsers

############ NOT IMPLEMENTED!
# get all users whose name contains the string
# ex: /users/search?name=linh
GET         /users/search                   controllers.AppUserController.searchUsers(name: String)

############ NOT IMPLEMENTED!
# get a user by the user_id
GET         /users/:id                      controllers.AppUserController.showUser(id: Long)

# create a new user with activity_id and user_id provided in json format
# ex: {"id":123,"name":"Andrea"}
POST        /users/create                   controllers.AppUserController.createAppUser



# generate a friendship with two IDs of the inviter and the invitee in json format
# ex: {"inviter_id":123,"invitee_id":321}
POST        /friendships/create             controllers.FriendshipController.sendFriendRequest

# accept the friendship request between the inviter and the invitee using friendshipId and inviterId
# ex: /friendships/123/accept/321
PUT         /friendships/:friendshipId/accept/:inviterId             controllers.FriendshipController.acceptFriendRequest(friendshipId: String, inviterId: String)

# decline the friendship request between the inviter and the invitee using friendshipId and inviterId
# ex: /friendships/123/decline/321
DELETE      /friendships/:friendshipId/decline/:inviterId            controllers.FriendshipController.declineFriendRequest(friendshipId: String, inviterId: String)

# retrieving data of all friends of a user
# ex: /friendships/123
GET         /friendships/:userId            controllers.AppUserController.getFriendList(userId: String)

# retrieving all friend request data
# ex: /friendships/123/requests
GET         /friendships/:userId/requests   controllers.FriendshipController.getAllFriendRequests(userId: String)



# start tracking activity with activity_id and user_id provided in json format
# ex: {"activity_id":123,"user_id":321}
POST        /activities/start               controllers.TrackedActivityController.startActivity

# as param give the id of the user
# ex: /activities/123/stop
GET         /activities/:userId/stop        controllers.TrackedActivityController.stopActivity(userId: String)

# get details about an activty blueprint
GET         /activities/:id                 controllers.ActivityBlueprintController.getActivityBlueprint(id: String)

# when app is started some activity blueprints are queried to be shown on activities screen
# ex: /activities/top/10 to only show the top 10 activities
GET         /activities/top/:number         controllers.ActivityBlueprintController.listActivities(number: Long)

# create a custom activity
# json for now because we might want to send more, also returns existing activity if already exists
# provide the activity name in json
# ex: {"name":"debugging"}
POST        /activities/create              controllers.ActivityBlueprintController.createActivityBlueprint
